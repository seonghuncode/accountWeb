<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 왼쪽의 버전은 tomcat버전과 맞춰야 한다. ex. tomcat8.5sms 3.1버전 intellij 맵핑되지 않은 spring 구성 파일 -->
    <!-- 경로를 지정하는 부분? -->


    <!-- contextloaderlistener의 환경설정 파일인 applicationContext.xml의 위치를 지정 / 연결할 XML파일 설정 -->
<!--    <context-param>-->
<!--        <param-name>contextConfigLocation</param-name>-->
<!--        <param-value>/**/WEB-INF/applicationContext.xml</param-value> &lt;!&ndash; 공유하는 bean설정 &ndash;&gt;-->
<!--    </context-param>-->




    <!-- Controller가 공유하는 Bean들을 포함하는 Spring Container를 생성한다 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- aliases 설정 -->
    <servlet>
        <!-- 아래 서블릿 매핑에 servlet-name은 반드시 같아야 한다 -->
        <!-- 파일 이름 + -servlet.xml로 생성 / servlet-name으로 설정한 이름과 실제 wev-inf폴더 내부  name-servlet.xml파일의 이름이 같아야 한다.-->
        <servlet-name>dispatcher</servlet-name>
        <!-- 개발자에 의해 작성된 실제 클래스 이름 -->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 작은 수 부터 로드된다 -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- url 패턴을 정해주는 부분 / 서블릿 매핑 -->
    <servlet-mapping>
        <!-- 매핑할 서블릿 이름 -->
        <servlet-name>dispatcher</servlet-name>
        <!-- URL주소 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- filter를 통해 웹에 오는 모든 요청의 캐릭터 섹을 utf-8로 변경 / 한글 인코딩 설정-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- spring 정적 리소스 사용 설정 / *.css요청은 servlet이 아닌 default로 처리 (resources에 css외부 파일을 html에서 못 읽어 올 경우 사용) -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <!-- html에서 js파일 경로를 읽어오게 하기 위해서 경로 지정 -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>


<!--    &lt;!&ndash; 스프링 Security 필터 &ndash;&gt;-->
<!--    &lt;!&ndash; 사용자가 요청을 할때마다 권한 인증이 이루어 져야한다 -> 모든 url(/*)요청을 해당 필터가 먼저 가로챈다 &ndash;&gt;-->
<!--    &lt;!&ndash; 필터의 이름은 springSecurityFilterChain으로 약속하며, 이것은 스프링 시큐리티 내부 빈으로써 자동 생성된다. &ndash;&gt;-->
<!--    <filter>-->
<!--        <filter-name>springSecurityFilterChain</filter-name>-->
<!--        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
<!--    </filter>-->
<!--    <filter-mapping>-->
<!--        <filter-name>springSecurityFilterChain</filter-name>-->
<!--        <url-pattern>/*</url-pattern>-->
<!--    </filter-mapping>-->



    <!--  Spring Security xml로 하는 방법 -->
    <!-- Spring Security Filter -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <!-- 스프링 시큐리티를 스프링 mvc에서 사용하기 위해 필터를 이용해 스프링 동작에 관여하도록 한다. -->
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 기존에 설정 되어 있던 /**/WEB-INF/applicationContext.xml것 뒤에 추가해서 context-security.xml경로를 알려준다.   -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            /**/WEB-INF/applicationContext.xml
            /WEB-INF/context-security.xml
        </param-value>
    </context-param>



</web-app>