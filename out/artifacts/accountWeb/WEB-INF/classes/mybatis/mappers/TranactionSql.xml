<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dao.TransactionRepository">


    <!-- 메인화면에서 특정 회원 거래내역 아이콘을 클릭할때 해당 회원 아이디의 primary key를 구해주는 로직 -->
    <select id="getPrimaryId" resultType="int" parameterType="String">
        SELECT id
        FROM `user`
        WHERE user_id = #{userId};
    </select>


    <!-- 특정 회원 거래내역 에서 당월에 대한 예산액을 추출하는 코드  (목표예산액) -->
    <select id="getTargetBudget" resultType="Integer" parameterType="hashmap">
        SELECT budget.price
        FROM budget
                 LEFT JOIN `user` ON budget.userId = user.id
        WHERE MONTH (`month`)=#{month}
          AND DATE_FORMAT(`month`
            , '%y')=#{year}
          AND user.id =#{primaryId};
    </select>

    <!-- map으로 받는 이유는 price, type에 대한 소비 내역이 여러개 이기 때문에 배열에 담겨 return되기 때문 (내역이 수입인지 지출인지 받아오는 데이터)-->
    <select id="getTransactionValue" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.price
        FROM `transaction`
                 LEFT JOIN `user` ON `transaction`.userId = user.id
        WHERE MONTH (`transaction_date`)=#{month}
          AND user.id =#{primaryId};
    </select>

    <!-- 메인페이지 에서 특정 회원 거래내역을 클릭할 경우 특정회원에 대한 거래 내역 정보를 가지고 오는 부분 -->
    <!-- 거래 내역을 내림차순으로 가지고 온다 >> 최근 거래내역 부터 보여주기 위함 -->
    <select id="getTransactionHistory" resultType="map" parameterType="hashmap">
        SELECT sort.name, `transaction`.memo, `transaction`.type, `transaction`.price, `transaction`.transaction_date
        FROM `transaction`
        LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
        LEFT JOIN `user`
        ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{month} AND `user`.id = #{primaryId} AND
        DATE_FORMAT(`transaction_date`,'%y')=#{year}
        <if test='!sortName.equals("") and !sortName.equals("-1")'>
            AND sort.name LIKE CONCAT('%',#{sortName},'%')
        </if>
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntExpend" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{month}
          AND `transaction`.type = '지출'
          AND `user`.id = #{primaryId}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntIncome" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{month}
          AND `transaction`.type = '수입'
          AND `user`.id = #{primaryId}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getTransactionHistoryByMonth" resultType="map" parameterType="hashmap">
        SELECT sort.name, `transaction`.memo, `transaction`.type, `transaction`.price, `transaction`.transaction_date
        FROM `transaction`
        LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
        LEFT JOIN `user`
        ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{selectMonth} AND `user`.id = #{primaryId} AND
        DATE_FORMAT(`transaction_date`,'%y')=#{selectYear}
        <if test='!sortName.equals("")'>
            AND sort.name LIKE CONCAT('%',#{sortName},'%')
        </if>
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntExpendBySearchMonth" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{selectMonth}
          AND `transaction`.type = '지출'
          AND `user`.id = #{primaryId}
          AND DATE_FORMAT(`transaction_date`
            , '%y')=#{selectYear}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntIncomeBySearchMonth" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{selectMonth}
          AND `transaction`.type = '수입'
          AND `user`.id = #{primaryId}
          AND DATE_FORMAT(`transaction_date`
            , '%y')=#{selectYear}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getTransactionHistoryByPeriod" resultType="map" parameterType="hashmap">
        SELECT sort.name, `transaction`.memo, `transaction`.type, `transaction`.price, `transaction`.transaction_date
        FROM `transaction`
        LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
        LEFT JOIN `user`
        ON `transaction`.userId = `user`.id
        WHERE (`transaction_date`) BETWEEN DATE(#{startDate}) AND DATE(#{endDate}) AND `user`.id = #{primaryId}
        <if test='!sortName.equals("")'>
            AND sort.name LIKE CONCAT('%',#{sortName},'%')
        </if>
        ORDER BY `transaction`.transaction_date DESC;
    </select>


    <select id="getDayCntExpendByPeriod" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE (`transaction_date`) BETWEEN DATE (#{startDate})
          AND DATE (#{endDate})
          AND `transaction`.type = '지출'
          AND `user`.id = #{primaryId}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntIncomeByPeriod" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE (`transaction_date`) BETWEEN DATE (#{startDate})
          AND DATE (#{endDate})
          AND `transaction`.type = '수입'
          AND `user`.id = #{primaryId}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <!--  해당 월에 해당하는 분류명 + 전체 월에서 상요하는 분류명(1111-12-12)-->
    <select id="getSortListShow" resultType="map" parameterType="hashmap">
        SELECT sort.name, sort.made_date , `user`.name
        FROM sort
        LEFT JOIN `user`
        ON sort.userId = `user`.id
        WHERE
        <choose>
            <when test='year2.equals("") and month2.equals("")'>
                MONTH(sort.made_date)=#{month} AND DATE_FORMAT(sort.made_date, '%y')=${year} || made_date = '1111-12-12' AND sort.userId = #{primaryId}
            </when>
            <otherwise>
                MONTH(sort.made_date) IN (#{month} , #{month2}) AND DATE_FORMAT(sort.made_date, '%y') IN (${year},
                #{year2}) || made_date = '1111-12-12' AND sort.userId = #{primaryId}
            </otherwise>
        </choose>

    </select>

    <!-- 사용자가 추가 하려는 분류명이 DB에 존재하는 분류명인지 체크하는 로직    -->
    <select id="getCheckExistSortName" resultType="String" parameterType="hashmap">
        SELECT EXISTS(
        SELECT * FROM sort WHERE
        <choose>
            <when test='sortDate.equals("항상")'> <!-- 조건이 항상이라면 전체 테이블 에서 존재 하는지 찾는다 -->
                `name` = #{addSort}
            </when>
            <otherwise> <!-- 만약 조건이 항상이 아니라 특정 날짜가 있다면 특정 월에만 존재 하는지 찾으면 된다 -->
                `name` = #{addSort} and
                MONTH(made_date) = SUBSTRING(#{sortDate}, 6,2) AND DATE_FORMAT(made_date, '%y') = SUBSTRING(#{sortDate},
                3,2)
            </otherwise>
        </choose>
        ) AS check_exist_sort_name;
    </select>

    <!-- 분류명을 추가해주는 쿼리 (분류명에서 날짜는 연,월만 선택하기 대문에 저장을 위해서는 일을 -00로 추가해 주어야 한다) -->
    <!-- insert시 made_date의 type은 date이기 때문에 반드시 날자 형식으로 해야 오류가 발생하지 않는다 (1111-12-12는 항상을 의미)-->
    <insert id="doAddSortName" parameterType="hashmap">
        INSERT INTO sort (`name`,made_date,userId)
        values(
        <choose>
            <when test='sortDate.equals("항상")'> <!-- 조건이 항상 -->
                #{addSort}, '1111-12-12',#{loginIdByPK} );
            </when>
            <otherwise> <!-- 만약 조건이 항상이 아니라 특정 날짜가 있다면 -->
                 #{addSort},
                 concat(#{sortDate},'-01'),
                 #{loginIdByPK} );
            </otherwise>
        </choose>
    </insert>

    <!-- 분류명 수정을 진행하는 쿼리 -->
    <update id="tryModifytSortName" parameterType="hashmap">
        UPDATE sort SET `name` = #{modifySort},
        <choose>
            <when test='sortDate.equals("항상")'> <!-- 조건이 항상 -->
                made_Date =  '1111-12-12'  WHERE userID = #{loginIdByPK} AND `name` = #{selSort};
            </when>
            <otherwise> <!-- 만약 조건이 항상이 아니라 특정 날짜가 있다면 -->
                made_Date = concat(#{sortDate},'-01') WHERE userID = #{loginIdByPK} AND `name` = #{selSort};
            </otherwise>
        </choose>
    </update>

    <!-- 분류명을 삭제하는 로직 -->
    <delete id="tryDeleteSortName">
        DELETE FROM sort WHERE `name` = #{selSort} AND userId = #{loginIdByPK};
    </delete>


    <!-- where조건에 부합하는 컬럼의 id값을 반환한다. -->
    <select id="checkBudgetByUserId" resultType="int" parameterType="hashmap">
        SELECT count(userId) FROM budget WHERE userId = #{loginIdPK} and `month` like concat('20', #{year}, '-',  #{month}, '%');
    </select>

    <!-- 사용자가 특정 날짜에 목표 예산을 설정한 적이 없을 경우 값을 넣어주는 쿼리 -->
    <insert id="budgetInsert"  parameterType="hashmap">
        INSERT INTO budget
        SET `price` = #{budgetValue},
            `month` = concat('20', #{year}, '-',  #{month}, '-01'),
            userId = #{loginIdPK};
    </insert>

    <!-- 사용자가 특정 날짜에 목표예산을 설정한 적이 있다면 해당 데이터를 업데이트 해준다. -->
    <update id="budgetUpdate" parameterType="hashmap">
        UPDATE budget SET `price` = #{budgetValue}, `month` = concat('20', #{year}, '-',  #{month}, '-01') WHERE userId = #{loginIdPK};
    </update>







</mapper>