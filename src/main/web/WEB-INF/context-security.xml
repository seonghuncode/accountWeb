<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/security
                                 http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 시큐리티가 동작하기 위해서는 Authenrication Manager라는 존재와 스프링 시큐리티의 시작 지점이 필요요 -->
    <!--    Authentication(인증) : 자신을 증명하는 것-->
    <!--    Authorization(권한) : 남에게 자격을 부여받는 것-->


    <!-- http 설명 내용
   auto-config="true": Spring Security의 기본 구성을 자동으로 활성화합니다. 즉, 보안 필터 체인, 인증, 인가 등의 기본 설정을 자동으로 구성합니다.
   use-expressions="false": 접근 제어 표현식 대신에 "ROLE_" 접두사와 함께 역할 이름을 사용하여 권한을 확인합니다. hasRole('ROLE_NAME') 형식으로 역할을 확인합니다.
   use-expressions="true": 접근 제어 표현식을 사용하여 보다 미세한 권한 검사를 할 수 있습니다. 예를 들어, hasRole('ROLE_USER') 대신에 hasAuthority('AUTHORITY_NAME')와 같이 더 다양한 표현식을 사용할 수 있습니다.
   -->
    <http auto-config="true" use-expressions="true">
        <!-- 해당 페이지는 특정 'ROLE_USER'권한이 있는 사용자만 접근 가능 -->
        <intercept-url pattern="/usr/main" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/transaction/**" access="hasRole('ROLE_USER')"/>



        <!--  설명
                username-parameter="loginId" -> 로그인 페이지 에서 아이디를 받는 input태그의 name과 동일하게 작성
                password-parameter="loginPw" -> 로그인 페이지 에서 비밀번호를 받는 input태그의 name과 동일하게 작성
                login-page="/usr/loginForm" -> 로그인 페이지 url
                default-target-url="/usr/main" -> 로그인을 성공 하면 실행될 로직
        -->
        <form-login
                username-parameter="loginId"
                password-parameter="loginPw"
                login-page="/usr/loginForm"
                default-target-url="/usr/main"
        />
        <csrf disabled="false"/> <!--  CSRF(Cross Site Resquest Fosery) 공격을 방어하기 위한 처리를 하겠다는 뜻 -->
        <logout logout-url="/usr/doLogout" invalidate-session="true"/> <!-- 로그아웃시 세션 무효화 -->

    </http>



    <!-- 설명
    실제 데이터베이스와 연동하여 사용자가 입력한 아이디와 비밀번호를 가지고  어떤 회원에게 어떠한 권한을 줄지 정하고 부여하여 인증을 저장하는 로직
    1. CustomUserDetailsService 위치를 bean으로 알려준다
    2. customUserDetailsService에 작성한 로직을 기반으로 권한을 부여하고 인증을 저장
    -->
    <beans:bean id="customUserDetailsService" class="service.CustomUserDetailsService"/>
    <authentication-manager>
        <authentication-provider user-service-ref="customUserDetailsService">
            <password-encoder ref="bcryptPasswordEncoder"/>
        </authentication-provider>
    </authentication-manager>


    <!-- 비밀번호를 암호화 하는데 사용하는 로직 -->
    <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


</beans:beans>
