<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dao.TransactionRepository">


    <!-- 메인화면에서 특정 회원 거래내역 아이콘을 클릭할때 해당 회원 아이디의 primary key를 구해주는 로직 -->
    <select id="getPrimaryId" resultType="int" parameterType="String">
        SELECT id
        FROM `user`
        WHERE user_id = #{userId};
    </select>


    <!-- 특정 회원 거래내역 에서 당월에 대한 예산액을 추출하는 코드  (목표예산액) -->
    <select id="getTargetBudget" resultType="Integer" parameterType="hashmap">
        SELECT budget.price
        FROM budget
                 LEFT JOIN `user` ON budget.userId = user.id
        WHERE MONTH (`month`)=#{month} AND DATE_FORMAT(`month`,'%y')=#{year}
          AND user.id =#{primaryId};
    </select>

    <!-- map으로 받는 이유는 price, type에 대한 소비 내역이 여러개 이기 때문에 배열에 담겨 return되기 때문 (내역이 수입인지 지출인지 받아오는 데이터)-->
    <select id="getTransactionValue" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.price
        FROM `transaction`
                 LEFT JOIN `user` ON `transaction`.userId = user.id
        WHERE MONTH (`transaction_date`)=#{month}
          AND user.id =#{primaryId};
    </select>

    <!-- 메인페이지 에서 특정 회원 거래내역을 클릭할 경우 특정회원에 대한 거래 내역 정보를 가지고 오는 부분 -->
    <!-- 거래 내역을 내림차순으로 가지고 온다 >> 최근 거래내역 부터 보여주기 위함 -->
    <select id="getTransactionHistory" resultType="map" parameterType="hashmap">
        SELECT sort.name, `transaction`.memo, `transaction`.type, `transaction`.price, `transaction`.transaction_date
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{month}  AND `user`.id = #{primaryId} AND DATE_FORMAT(`transaction_date`,'%y')=#{year}
        <if test='!sortName.equals("") and !sortName.equals("-1")'>
            AND sort.name LIKE CONCAT('%',#{sortName},'%')
        </if>
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntExpend" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{month} AND `transaction`.type = '지출' AND `user`.id = #{primaryId}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntIncome" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{month} AND `transaction`.type = '수입' AND `user`.id = #{primaryId}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getTransactionHistoryByMonth" resultType="map" parameterType="hashmap">
        SELECT sort.name, `transaction`.memo, `transaction`.type, `transaction`.price, `transaction`.transaction_date
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{selectMonth} AND `user`.id = #{primaryId} AND DATE_FORMAT(`transaction_date`,'%y')=#{selectYear}
        <if test='!sortName.equals("")'>
            AND sort.name LIKE CONCAT('%',#{sortName},'%')
        </if>
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntExpendBySearchMonth" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{selectMonth} AND `transaction`.type = '지출' AND `user`.id = #{primaryId} AND DATE_FORMAT(`transaction_date`,'%y')=#{selectYear}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntIncomeBySearchMonth" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE MONTH (`transaction_date`)=#{selectMonth}  AND `transaction`.type = '수입' AND `user`.id = #{primaryId} AND DATE_FORMAT(`transaction_date`,'%y')=#{selectYear}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getTransactionHistoryByPeriod" resultType="map" parameterType="hashmap">
        SELECT sort.name, `transaction`.memo, `transaction`.type, `transaction`.price, `transaction`.transaction_date
        FROM `transaction`
        LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
        LEFT JOIN `user`
        ON `transaction`.userId = `user`.id
        WHERE  (`transaction_date`) BETWEEN DATE(#{startDate}) AND DATE(#{endDate}) AND `user`.id = #{primaryId}
        <if test='!sortName.equals("")'>
            AND sort.name LIKE CONCAT('%',#{sortName},'%')
        </if>
        ORDER BY `transaction`.transaction_date DESC;
    </select>


    <select id="getDayCntExpendByPeriod" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE(`transaction_date`) BETWEEN DATE(#{startDate}) AND DATE(#{endDate}) AND `transaction`.type = '지출' AND `user`.id = #{primaryId}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>

    <select id="getDayCntIncomeByPeriod" resultType="map" parameterType="hashmap">
        SELECT `transaction`.type, `transaction`.transaction_date, SUM(`transaction`.price) as `total`
        FROM `transaction`
                 LEFT JOIN sort ON `transaction`.sortId = sort.transactionId
                 LEFT JOIN `user`
                           ON `transaction`.userId = `user`.id
        WHERE (`transaction_date`) BETWEEN DATE(#{startDate}) AND DATE(#{endDate}) AND `transaction`.type = '수입' AND `user`.id = #{primaryId}
        GROUP BY transaction_date
        ORDER BY `transaction`.transaction_date DESC;
    </select>


</mapper>