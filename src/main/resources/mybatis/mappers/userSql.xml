<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dao.UsrRepository">

    <!-- 이메일 중복 여부를 확인 하기 위한 sql -->
    <select id="getCheckExistEmail" parameterType="String" resultType="String">
        select email
        from `user`
        where email = #{eamil}
    </select>

    <!-- 아디디 중복 여부를 확인하기 위한 sql -->
    <select id="getCheckExistUserId" parameterType="String" resultType="String">
        select user_id
        from `user`
        where user_id = #{userId}
    </select>

    <insert id="join" parameterType="dto.UsrDto">
        insert into `user`
        set `name` = #{name},
            email = #{email},
            user_id = #{userId},
            `password` = #{password},
            view_yn = #{view_yn},
            create_date = now()
    </insert>

    <select id="getUserPassword" parameterType="String" resultType="String">
        select password
        from `user`
        where user_id = #{userId}
    </select>

    <select id="findUserNameByUserId" parameterType="String" resultType="String">
        select `name`
        from `user`
        where user_id = #{userId}
    </select>

    <select id="getAllUserFromDB" resultType="map">
        select *
        from `user`
    </select>


    <!-- 페이징 기능을 위한 역할  (cdata는 문장을 문자열로 인식하게 한다) -->
    <select id="selectBoardList" resultType="hashmap" parameterType="hashmap">
    <![CDATA[
        SELECT *
        FROM `user`
        WHERE view_yn = 'yes'
        ORDER BY id ASC
            LIMIT #{pageStart}, #{perPageNum}
        ]]>
</select>

    <!-- DB에 존재 하는 전체 회원의 수를 구하는 sql문 / 메인화면에서 보여줄 회원의 수만 필요하기 때문에 view_yn=yes인 데이터만 카운트 한다 -->
    <select id="countUsrListTotal" resultType="Integer">
  <![CDATA[
        SELECT count(*)
        FROM `user`
        WHERE view_yn = 'yes'
        ]]>
    </select>

    <select id="getAllUserCnt" resultType="Integer">
        SELECT count(*)
        FROM `user`
    </select>

    <select id="getNoUserCnt" resultType="Integer">
        SELECT count(*)
        FROM `user`
        WHERE view_yn = 'no'
    </select>


    <!-- 사용자가 입력한 검색어를 매개변수로 받아 쿼리 작성 하는 방법-->
    <select id="getUsersFromSearch" resultType="hashmap" parameterType="hashmap">
        SELECT *
        FROM `user`
        WHERE `name` LIKE CONCAT('%', #{search}, '%')
          AND view_yn = 'yes'
        ORDER BY id ASC
            LIMIT #{pageStart}, #{perPageNum}
    </select>


    <select id="countSearchUsrListTotal" resultType="Integer" parameterType="String">
        SELECT count(*)
        FROM `user`
        WHERE `name` LIKE CONCAT('%', #{search}, '%')
          AND view_yn = 'yes'
    </select>

    <!-- 회원정보 수정 페이지 에서 사용자가 수정하려고 하는 이메일이 중복되는 이메일인지 확인하는 로직 -->
    <select id="checkEmailForModifyMyInfo" resultType="Integer" parameterType="hashmap">
        SELECT EXISTS(SELECT * FROM `user` WHERE id != #{userIdPK} AND email = #{email})
    </select>

    <!-- 회원정보 수정 페이지 에서 사용자가 수정하려고 하는 아이다가 중복되는 아이디 인지 확인하는 로직 -->
    <select id="checkUserIdForModifyMyInfo" resultType="Integer" parameterType="hashmap">
        SELECT EXISTS(SELECT * FROM `user` WHERE id != #{userIdPK} AND user_id = #{userId})
    </select>

    <!-- 회원정보 수정 페이지 에서 사용자가 입력한 모든 데이터가 유효성 검사를 통과한 데이터로 실제 데이터베이스에 데이터를 수정 반영하는 로직 -->
    <update id="doModifyUserInfo" parameterType="hashmap">
        UPDATE `user` SET
        <choose>
            <when test='newPassword.equals("빈값")'>
                `name` = #{newName}, email = #{newEmail}, user_id = #{newUserId}, view_yn = #{newView_YN} WHERE id =
                #{userIdPK};
            </when>
            <otherwise>
                `name` = #{newName}, email = #{newEmail}, user_id = #{newUserId}, view_yn = #{newView_YN}, password =
                #{newPassword} WHERE id = #{userIdPK};
            </otherwise>
        </choose>
    </update>


    <!-- 사용자가 아이디 찾기 페이지 에서 아이디 찾기 버튼을 클릭했을 경우 해당 정보와 일치하는 아이디를 찾아오는 쿼리리 -->
    <select id="findUserIdProcess" resultType="map" parameterType="hashmap">
        SELECT user_id FROM `user` WHERE `name` = #{userName} AND email = #{userEmail};
    </select>

    <!-- 사용자가 비밀번호 찾기 에서 입력한 이름, 아이디, 이메일 값이 유효성 검증을 통과하면 해당 데이터와 일치하는 회원의 PK값을 찾는 로직 -->
    <select id="getUserPkByFindPw" resultType="Integer" parameterType="hashmap">
        SELECT id FROM `user` WHERE `name`=#{userName} AND email = #{userEmail} AND user_id=#{userId};
    </select>



    <!-- 비밀번호 찾기 에서 임시 비밀번호가 생성되면 기존 회원의 비밀번호를 임시 비밀번호로 변경한다. -->
    <update id="changePwToTemporaryPw" parameterType="hashmap">
        UPDATE `user` SET `password` = #{temporaryPassword} WHERE id = #{userPk};
    </update>


    <!--  현재 로그인 되어 있는 회원을 탈퇴시키는 로직 -->
    <delete id="doInfoDelete" parameterType="hashmap">
        DELETE FROM `user` WHERE id = #{userIdPK} and user_id = #{userId};
    </delete>


</mapper>


